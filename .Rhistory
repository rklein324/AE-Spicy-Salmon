"Stikine" = T,
"Taku" = T,
"Unuk" = T),
selected = "All")
),
# creates main panel with description and chart
mainPanel(
p("salmon have been changing in size (length in millimeters) over time;",
"this is shown in the data collected by",
"the Alaska Department of Fish and Game"),
p("this chart shows that change"),
p("you can decide to separate the data into males and females or not,",
"but separating it will result in less acurate data,",
"as not all observations recorded the sex"),
p("to see more specific information, you can select",
"a specific river in alaska to view;",
"you can also specify that range of time you would like to view"),
plotlyOutput(outputId = "size_chart")
)
)
)
library(shiny)
library(plotly)
library(ggplot2)
library(tidyr)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
source("analysis/size_age_analysis.R")
size_df <- create_full_df(create_edited_size_age_df())
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex[1],
male = input$sex[2],
female = input$sex[3],
river = input$river[1],
Chilkat = input$river[2],
Stikine = input$river[3],
Taku = input$river[4],
Unuk = input$river[5])
df %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
type = 'scatter',
mode = 'lines+markers')
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_data(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
color = ~SpeciesCommon,
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
output$age_vs_size <- renderPlot({
df <- create_size_age_df()
df <- mutate_size_age_df(df)
df <- df %>% select(Length, age, Sex, river)
df <- drop_na(df)
# df <- df %>% filter(Sex == "female", age == 2)
if(input$selectSex == 1) {
df <- df %>% filter(Sex == "female")
} else if(input$selectSex == 0) {
df <- df %>% filter(Sex == "male")
}
if (input$river == "Stikine") {
df <- df %>% filter(river == "Stikine")
} else if(input$river == "Chilkat") {
df <- df %>% filter(river == "Chilkat")
} else if(input$river == "Taku") {
df <- df %>% filter(river == "Taku")
} else if(input$river == "Unuk") {
df <- df %>% filter(river == "Unuk")
}
df2 <- df %>% group_by(age) %>%
summarise(aveSize = mean(Length))
ggplot(df2, aes(x=age, y=aveSize)) +
geom_line() +
geom_point()
})
}
runApp()
output$result <- renderText({
input$sex[1]
})
size_vs_time_page <- tabPanel(
"Size Over Time",
titlePanel("The Change in Salmon Size Over Time"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
# can select whether to separate by sex or not
checkboxGroupInput("sex",
label = h3("Sex"),
choices = list("Total" = T,
"Male" = T,
"Female" = T),
selected = "Total"),
# can select a river (or rivers) to look at data about
# none selected means you look at the whole data set
checkboxGroupInput("river",
label = h3("Select river"),
choices = list("All" = T,
"Chilkat" = T,
"Stikine" = T,
"Taku" = T,
"Unuk" = T),
selected = "All")
),
# creates main panel with description and chart
mainPanel(
p("salmon have been changing in size (length in millimeters) over time;",
"this is shown in the data collected by",
"the Alaska Department of Fish and Game"),
p("this chart shows that change"),
p("you can decide to separate the data into males and females or not,",
"but separating it will result in less acurate data,",
"as not all observations recorded the sex"),
p("to see more specific information, you can select",
"a specific river in alaska to view;",
"you can also specify that range of time you would like to view"),
plotlyOutput(outputId = "size_chart"),
textOutput("result")
)
)
)
runApp()
View(df)
View(size_df)
create_size_df <- function(df, sex = c("total", "male", "female"),
river = c("total", "Chilkat", "Stikine", "Taku", "Unuk")) {
filter(df, Sex %in% sex) %>%
filter(river %in% river)
}
View(create_size_df(size_df))
View(create_size_df(size_df, sex = c("total")))
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
type = 'scatter',
mode = 'lines+markers')
})
library(plotly)
size_vs_time_page <- tabPanel(
"Size Over Time",
titlePanel("The Change in Salmon Size Over Time"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
# can select whether to separate by sex or not
checkboxGroupInput("sex",
label = h3("Sex"),
choices = list("Total" = "total",
"Male" = "male",
"Female" = "female"),
selected = "total"),
# can select a river (or rivers) to look at data about
# none selected means you look at the whole data set
checkboxGroupInput("river",
label = h3("Select river"),
choices = list("All" = "total",
"Chilkat" = "Chilkat",
"Stikine" = "Stikine",
"Taku" = "Taku",
"Unuk" = "Unuk"),
selected = "total")
),
# creates main panel with description and chart
mainPanel(
p("salmon have been changing in size (length in millimeters) over time;",
"this is shown in the data collected by",
"the Alaska Department of Fish and Game"),
p("this chart shows that change"),
p("you can decide to separate the data into males and females or not,",
"but separating it will result in less acurate data,",
"as not all observations recorded the sex"),
p("to see more specific information, you can select",
"a specific river in alaska to view;",
"you can also specify that range of time you would like to view"),
plotlyOutput(outputId = "size_chart"),
textOutput("result")
)
)
)
runApp()
library(shiny)
library(plotly)
library(ggplot2)
library(tidyr)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
source("analysis/size_age_analysis.R")
size_df <- create_full_df(create_edited_size_age_df())
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
type = 'scatter',
mode = 'lines+markers')
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_data(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
output$age_vs_size <- renderPlot({
df <- create_size_age_df()
df <- mutate_size_age_df(df)
df <- df %>% select(Length, age, Sex, river)
df <- drop_na(df)
# df <- df %>% filter(Sex == "female", age == 2)
if(input$selectSex == 1) {
df <- df %>% filter(Sex == "female")
} else if(input$selectSex == 0) {
df <- df %>% filter(Sex == "male")
}
if (input$river == "Stikine") {
df <- df %>% filter(river == "Stikine")
} else if(input$river == "Chilkat") {
df <- df %>% filter(river == "Chilkat")
} else if(input$river == "Taku") {
df <- df %>% filter(river == "Taku")
} else if(input$river == "Unuk") {
df <- df %>% filter(river == "Unuk")
}
df2 <- df %>% group_by(age) %>%
summarise(aveSize = mean(Length))
ggplot(df2, aes(x=age, y=aveSize)) +
geom_line() +
geom_point()
})
}
runApp()
library(shiny)
library(plotly)
library(ggplot2)
library(tidyr)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
source("analysis/size_age_analysis.R")
size_df <- create_full_df(create_edited_size_age_df())
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_data(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
color = ~SpeciesCommon,
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
output$age_vs_size <- renderPlot({
df <- create_size_age_df()
df <- mutate_size_age_df(df)
df <- df %>% select(Length, age, Sex, river)
df <- drop_na(df)
# df <- df %>% filter(Sex == "female", age == 2)
if(input$selectSex == 1) {
df <- df %>% filter(Sex == "female")
} else if(input$selectSex == 0) {
df <- df %>% filter(Sex == "male")
}
if (input$river == "Stikine") {
df <- df %>% filter(river == "Stikine")
} else if(input$river == "Chilkat") {
df <- df %>% filter(river == "Chilkat")
} else if(input$river == "Taku") {
df <- df %>% filter(river == "Taku")
} else if(input$river == "Unuk") {
df <- df %>% filter(river == "Unuk")
}
df2 <- df %>% group_by(age) %>%
summarise(aveSize = mean(Length))
ggplot(df2, aes(x=age, y=aveSize)) +
geom_line() +
geom_point()
})
}
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
group_by(Sex, river)
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
group_by(sampleYear, Sex, river)
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, river = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
View(create_size_df(size_df, river = "total"))
create_size_df <- function(df, sex = c("total", "male", "female"),
rivers = c("total", "Chilkat", "Stikine", "Taku", "Unuk")) {
filter(df, Sex %in% sex) %>%
filter(river %in% rivers)
}
View(create_size_df(size_df, rivers = "total"))
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
source('analysis/size_age_analysis.R')
create_size_df <- function(df, sex = c("total", "male", "female"),
rivers = c("total", "Chilkat", "Stikine", "Taku", "Unuk")) {
filter(df, Sex %in% sex) %>%
filter(river %in% rivers)
}
# creates the data frame for the size chart
create_full_df <- function(df) {
sep_df <- group_by(df, sampleYear, river, Sex) %>%
summarize(Length = mean(Length, na.rm = TRUE)) %>%
filter(!is.na(Sex))
sep_sex_df <- group_by(df, sampleYear, Sex) %>%
summarize(Length = mean(Length, na.rm = TRUE)) %>%
filter(!is.na(Sex)) %>%
mutate(river = "total")
sep_river_df <- group_by(df, sampleYear, river) %>%
summarize(Length = mean(Length, na.rm = TRUE)) %>%
mutate(Sex = "total")
not_sep_df <- group_by(df, sampleYear) %>%
summarize(Length = mean(Length, na.rm = TRUE)) %>%
mutate(Sex = "total", river = "total")
df <- full_join(sep_df, not_sep_df) %>%
full_join(sep_sex_df) %>%
full_join(sep_river_df) %>%
arrange(sampleYear)
}
library(shiny)
library(plotly)
library(ggplot2)
library(tidyr)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
source("analysis/size_age_analysis.R")
size_df <- create_full_df(create_edited_size_age_df())
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
type = 'scatter',
mode = 'lines+markers')
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_data(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
color = ~SpeciesCommon,
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
output$age_vs_size <- renderPlot({
df <- create_size_age_df()
df <- mutate_size_age_df(df)
df <- df %>% select(Length, age, Sex, river)
df <- drop_na(df)
# df <- df %>% filter(Sex == "female", age == 2)
if(input$selectSex == 1) {
df <- df %>% filter(Sex == "female")
} else if(input$selectSex == 0) {
df <- df %>% filter(Sex == "male")
}
if (input$river == "Stikine") {
df <- df %>% filter(river == "Stikine")
} else if(input$river == "Chilkat") {
df <- df %>% filter(river == "Chilkat")
} else if(input$river == "Taku") {
df <- df %>% filter(river == "Taku")
} else if(input$river == "Unuk") {
df <- df %>% filter(river == "Unuk")
}
df2 <- df %>% group_by(age) %>%
summarise(aveSize = mean(Length))
ggplot(df2, aes(x=age, y=aveSize)) +
geom_line() +
geom_point()
})
}
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex && river
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex && river,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex && ~river,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
group_by(sampleYear, Sex, river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
group = ~river
type = 'scatter',
mode = 'lines+markers')
})
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
group = ~river,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(size_df, sex = input$sex, rivers = input$river) %>%
plot_ly(x = ~sampleYear,
y = ~Length,
color = ~Sex,
color = ~river,
type = 'scatter',
mode = 'lines+markers')
})
runApp()
