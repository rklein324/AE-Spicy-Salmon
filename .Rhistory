}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zeze", "sa")
has_more_zs <- function(first_string, second_string) {
first_occ <- str_count(str_to_lower(first_string), "z")
second_occ <- str_count(str_to_lower(second_string), "z")
if(first_occ == 0 & second_occ == 0) {
return("Neither string contains the letter z.")
} else if(first_occ == second_occ) {
return("The strings have the same number of Zs.")
} else if(first_occ > second_occ) {
return(first_string)
} else {
return(second_string)
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zeze", "zzz")
remove_digits <- function(vector) {
}
remove_digits <- function(vector) {
sd
}
remove_digits <- function(string_vector) {
str_replace(string_vector, "[:digit:]", "")
}
remove_digits <- function(string_vector) {
str_replace(string_vector, "[:digit:]", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(string_vector) {
str_replace(string_vector, "[:digit:]+", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Social Network", "HIMYM", "Beautiful Mind", "Baby Daddy", "Silicon Valley", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[0:3]
movies <- c("The Social Network", "HIMYM", "Beautiful Mind", "Baby Daddy", "Silicon Valley", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[0:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, " is a great movie!"))
excited
movies
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Social Network", "HIMYM", "Beautiful Mind", "Baby Daddy", "Silicon Valley", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[0:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, " is a great movie!"))
movies
movies.2
movies[]
movies[-4]
movies[,-1]
movies[-3]
movies[-1]
movies[-2]
movies[-4]
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Social Network", "HIMYM", "Beautiful Mind", "Baby Daddy", "Silicon Valley", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[0:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, " is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
without_four
movies
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- range(4, 400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- range(c(4, 400))
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- range(c(4, 400))
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, by=4)
multiples_of_4
filter(multiples_of_4)
multiples_of_4[multiples_of_4 % 8]
multiples_of_4[x % 8]
multiples_of_4[lapply(multiples_of_4, "%%", 8) == 0]
lapply(multiples_of_4, "%%", 8) == 0
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[lapply(multiples_of_4, "%%", 8) == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
numbers
length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
numbers[lapply(numbers, "<", numbers_mean)]
numbers[numbers < numbers_mean]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < 2]
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- lower_numbers[lower_numbers < 2]
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list("length"=numbers_len, "mean"=numbers_mean, "median"=numbers_median)
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summa
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list("length"=numbers_len, "mean"=numbers_mean, "median"=numbers_median)
summarize_vector <- function(number_vector) {
vec_len <- length(number_vector)
vec_mean <- mean(number_vector)
vec_median <- median(number_vector)
return(list("length"=vec_len, "mean"=vec_mean, "median"=vec_median))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summary_1_to_100(seq(1, 100))
summarize_vector <- function(number_vector) {
vec_len <- length(number_vector)
vec_mean <- mean(number_vector)
vec_median <- median(number_vector)
return(list("length"=vec_len, "mean"=vec_mean, "median"=vec_median))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summary_1_to_100(seq(1, 100))
summarize_vector <- function(number_vector) {
vec_len <- length(number_vector)
vec_mean <- mean(number_vector)
vec_median <- median(number_vector)
return(list("length"=vec_len, "mean"=vec_mean, "median"=vec_median))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
summary_1_to_100
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr::lint()
lintr::lint('assignment.R')
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Nahom"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values
# passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
greeting <- sprintf("Hello, my name is %s, and I'm %s years old.", name, age)
return(greeting)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- str_to_upper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- str_to_lower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
return(value * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
return(value * value * value)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
return(inches * 2.54)
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 68
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(first_string, second_string) {
first_occ <- str_count(str_to_lower(first_string), "z")
second_occ <- str_count(str_to_lower(second_string), "z")
if (first_occ == 0 & second_occ == 0) {
return("Neither string contains the letter z.")
} else if (first_occ == second_occ) {
return("The strings have the same number of Zs.")
} else if (first_occ > second_occ) {
return(first_string)
} else {
return(second_string)
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zeze", "zzz")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string_vector) {
str_replace(string_vector, "[:digit:]+", "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Social Network",
"HIMYM",
"Beautiful Mind",
"Baby Daddy",
"Silicon Valley",
"Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[0:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, " is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, by = 4)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list("length" = numbers_len,
"mean" = numbers_mean,
"median" = numbers_median)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(number_vector) {
vec_len <- length(number_vector)
vec_mean <- mean(number_vector)
vec_median <- median(number_vector)
return(list("length" = vec_len,
"mean" = vec_mean,
"median" = vec_median))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
install.packages('carData')
df <- load(carData)
df <- load("carData")
df <- load("carData", stringAsFactors=FALSE)
library(carData)
help(carData)
??carData
df <- load("carData", stringsAsFactors=FALSE)
df <- load(carData, stringsAsFactors=FALSE)
View(Florida)
Florida$GORE
Florida[,GORE]
Florida[[0]]
Florida[[GORE]]
Florida[GORE]
Florida$Total
Florida$Total[0]
Florida$Total[[0]]
Florida$Total$0
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
Florida[Florida$Total,]
Florida[Florida$GORE]
Florida[Florida$GORE,]
Florida[Florida$GORE$total,]
sum(Florida$GORE)
sum(Florida$BUSH)
Florida[Florida$GORE > Florida$BUSH]
Florida[Florida$GORE > Florida$BUSH,]
Florida[,Florida$GORE > Florida$BUSH]
Florida[Florida$GORE > Florida$BUSH,]
d <- Florida[Florida$GORE > Florida$BUSH,]
d$NADER
sum(d$NADER)
nrow(Florida[Florida$GORE > Florida$BUSH,])
nrow(Florida[GORE > BUSH,])
nrow(Florida[,Florida$GORE > Florida$BUSH])
Florida[Florida$GORE > Florida$BUSH,]
Florida[0,]
Florida[1,]
Florida[,1]
Florida[1,1]
Florida[0,]
Florida[2,]
install.packages("shiny")
library(shiny)
shiny::runApp('Documents/INFO201/AE-Spicy-Salmon')
shiny::runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
r <-  get_full_df()
r
r[1]
r[,1]
r$1
r[2]
r[1,1]
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
library(DT)
runApp('Documents/INFO201/a7--NahomAgidew')
r[1, 2]
r[1, 1]
r[1, 2]
r[2, 1]
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
get_full_df(state = input$rep_state)
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
list(congress = c("116", "115", "114", "113", "112"), chamber = c("House", "House", "House", "House", "House"), title = c("Representative", "Representative", "Representative", "Representative", "Representative"), short_title = c("Rep.", "Rep.", "Rep.", "Rep.", "Rep."), state = c("WA", "WA", "WA", "WA", "WA"), party = c("D", "D", "D", "D", "D"), leadership_role = c(NA, NA, NA, NA, NA), fec_candidate_id = c("H0WA08046", "H0WA08046", "H0WA08046", "", ""), seniority = c("10", "8", "6", "4", "2"), district = c("1", "1", "1", "1", "1"), at_large = c(FALSE, FALSE, FALSE, FALSE, FALSE), ocd_id = c("ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1"), start_date = c("2019-01-03", "2017-01-03", "2015-01-06", "2013-01-03", "2012-11-13"), end_date = c("2021-01-03", "2019-01-03", "2017-01-03", "2015-01-03", "2013-01-03"), office = c("2330 Rayburn House Office Building", "2442 Rayburn House Office Building", NA, NA, NA), phone = c("202-225-6311", "202-225-6311", NA, NA, NA), fax = c(NA, "202-226-1606", NA, NA, NA), contact_form = c(NA, NA, NA, NA, NA), cook_pvi = c("D+6", NA, NA, NA, NA), bills_sponsored = c(17, 24, 18, 13, 0), bills_cosponsored = c(393, 416, 319, 331, 0), missed_votes_pct = c(0, 0.17, 0.68, 0.75, 0), votes_with_party_pct = c(99.38, 96.35, 96.77, 93.67, 98.18), votes_against_party_pct = c(0.47, 3.65, 3.15, 6.24, 1.82), committees = list(list(name = c("Committee on Ways and Means", "Select Committee on the Modernization of Congress"), code = c("HSWM", "HSMH"), api_uri = c("https://api.propublica.org/congress/v1/116/house/committees/HSWM.json", "https://api.propublica.org/congress/v1/116/house/committees/HSMH.json"), side = c("majority", "majority"), title = c("Member", "Member"), rank_in_party = c(13, 3), begin_date = c("2019-01-15", ""), end_date = c("2021-01-03", "2021-01-03")), list(name = c("Committee on the Budget", "Committee on Ways and Means"), code = c("HSBU", "HSWM" ), api_uri = c("https://api.propublica.org/congress/v1/115/house/committees/HSBU.json", "https://api.propublica.org/congress/v1/115/house/committees/HSWM.json"), side = c("minority", "minority"), title = c("Member", "Member"), rank_in_party = c(7, 15), begin_date = c("", ""), end_date = c("2019-01-03", "2019-01-03")), list(name = c("Committee on Agriculture", "Select Investigative Panel of the Committee on Energy and Commerce", "Committee on the Judiciary"), code = c("HSAG", "", "HSJU"), api_uri = c("https://api.propublica.org/congress/v1/114/house/committees/HSAG.json", "https://api.propublica.org/congress/v1/114/house/committees/.json", "https://api.propublica.org/congress/v1/114/house/committees/HSJU.json"), rank_in_party = c(7, 5, 13), begin_date = c("", "", ""), end_date = c("2017-01-03", "2017-01-03", "2017-01-03")), list(name = c("Committee on Agriculture", "Committee on the Judiciary"), code = c("HSAG", "HSJU"), api_uri = c("https://api.propublica.org/congress/v1/113/house/committees/HSAG.json", "https://api.propublica.org/congress/v1/113/house/committees/HSJU.json" ), rank_in_party = c(9, 14), begin_date = c("2013-01-14", "2013-01-03"), end_date = c("2015-01-03", "2015-01-03")), list()), subcommittees = list(list(name = c("Trade", "Select Revenue Measures", "Oversight"), code = c("HSWM04", "HSWM05", "HSWM06"), parent_committee_id = c("HSWM", "HSWM", "HSWM"), api_uri = c("https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM04.json", "https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM05.json", "https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM06.json" ), side = c("majority", "majority", "majority"), title = c("Member", "Member", "Member"), rank_in_party = c(10, 5, 2), begin_date = c("2019-01-16", "2019-01-16", "2019-01-16"), end_date = c("2021-01-03", "2021-01-03", "2021-01-03")), list(name = c("Select Revenue Measures", "Oversight"), code = c("HSWM05", "HSWM06"), parent_committee_id = c("HSWM", "HSWM"), api_uri = c("https://api.propublica.org/congress/v1/115/house/committees/HSWM/subcommittees/HSWM05.json", "https://api.propublica.org/congress/v1/115/house/committees/HSWM/subcommittees/HSWM06.json" ), side = c("minority", "minority"), title = c("Member", "Member"), rank_in_party = c(5, 3), begin_date = c("", ""), end_date = c("2019-01-03", "2019-01-03")), list(), list(), list()))
list(congress = c("116", "115", "114", "113", "112"), chamber = c("House", "House", "House", "House", "House"), title = c("Representative", "Representative", "Representative", "Representative", "Representative"), short_title = c("Rep.", "Rep.", "Rep.", "Rep.", "Rep."), state = c("WA", "WA", "WA", "WA", "WA"), party = c("D", "D", "D", "D", "D"), leadership_role = c(NA, NA, NA, NA, NA), fec_candidate_id = c("H0WA08046", "H0WA08046", "H0WA08046", "", ""), seniority = c("10", "8", "6", "4", "2"), district = c("1", "1", "1", "1", "1"), at_large = c(FALSE, FALSE, FALSE, FALSE, FALSE), ocd_id = c("ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1", "ocd-division/country:us/state:wa/cd:1"), start_date = c("2019-01-03", "2017-01-03", "2015-01-06", "2013-01-03", "2012-11-13"), end_date = c("2021-01-03", "2019-01-03", "2017-01-03", "2015-01-03", "2013-01-03"), office = c("2330 Rayburn House Office Building", "2442 Rayburn House Office Building", NA, NA, NA), phone = c("202-225-6311", "202-225-6311", NA, NA, NA), fax = c(NA, "202-226-1606", NA, NA, NA), contact_form = c(NA, NA, NA, NA, NA), cook_pvi = c("D+6", NA, NA, NA, NA), bills_sponsored = c(17, 24, 18, 13, 0), bills_cosponsored = c(393, 416, 319, 331, 0), missed_votes_pct = c(0, 0.17, 0.68, 0.75, 0), votes_with_party_pct = c(99.38, 96.35, 96.77, 93.67, 98.18), votes_against_party_pct = c(0.47, 3.65, 3.15, 6.24, 1.82), committees = list(list(name = c("Committee on Ways and Means", "Select Committee on the Modernization of Congress"), code = c("HSWM", "HSMH"), api_uri = c("https://api.propublica.org/congress/v1/116/house/committees/HSWM.json", "https://api.propublica.org/congress/v1/116/house/committees/HSMH.json"), side = c("majority", "majority"), title = c("Member", "Member"), rank_in_party = c(13, 3), begin_date = c("2019-01-15", ""), end_date = c("2021-01-03", "2021-01-03")), list(name = c("Committee on the Budget", "Committee on Ways and Means"), code = c("HSBU", "HSWM" ), api_uri = c("https://api.propublica.org/congress/v1/115/house/committees/HSBU.json", "https://api.propublica.org/congress/v1/115/house/committees/HSWM.json"), side = c("minority", "minority"), title = c("Member", "Member"), rank_in_party = c(7, 15), begin_date = c("", ""), end_date = c("2019-01-03", "2019-01-03")), list(name = c("Committee on Agriculture", "Select Investigative Panel of the Committee on Energy and Commerce", "Committee on the Judiciary"), code = c("HSAG", "", "HSJU"), api_uri = c("https://api.propublica.org/congress/v1/114/house/committees/HSAG.json", "https://api.propublica.org/congress/v1/114/house/committees/.json", "https://api.propublica.org/congress/v1/114/house/committees/HSJU.json"), rank_in_party = c(7, 5, 13), begin_date = c("", "", ""), end_date = c("2017-01-03", "2017-01-03", "2017-01-03")), list(name = c("Committee on Agriculture", "Committee on the Judiciary"), code = c("HSAG", "HSJU"), api_uri = c("https://api.propublica.org/congress/v1/113/house/committees/HSAG.json", "https://api.propublica.org/congress/v1/113/house/committees/HSJU.json" ), rank_in_party = c(9, 14), begin_date = c("2013-01-14", "2013-01-03"), end_date = c("2015-01-03", "2015-01-03")), list()), subcommittees = list(list(name = c("Trade", "Select Revenue Measures", "Oversight"), code = c("HSWM04", "HSWM05", "HSWM06"), parent_committee_id = c("HSWM", "HSWM", "HSWM"), api_uri = c("https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM04.json", "https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM05.json", "https://api.propublica.org/congress/v1/116/house/committees/HSWM/subcommittees/HSWM06.json" ), side = c("majority", "majority", "majority"), title = c("Member", "Member", "Member"), rank_in_party = c(10, 5, 2), begin_date = c("2019-01-16", "2019-01-16", "2019-01-16"), end_date = c("2021-01-03", "2021-01-03", "2021-01-03")), list(name = c("Select Revenue Measures", "Oversight"), code = c("HSWM05", "HSWM06"), parent_committee_id = c("HSWM", "HSWM"), api_uri = c("https://api.propublica.org/congress/v1/115/house/committees/HSWM/subcommittees/HSWM05.json", "https://api.propublica.org/congress/v1/115/house/committees/HSWM/subcommittees/HSWM06.json" ), side = c("minority", "minority"), title = c("Member", "Member"), rank_in_party = c(5, 3), begin_date = c("", ""), end_date = c("2019-01-03", "2019-01-03")), list(), list(), list()))$office
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
library(ggplot2)
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
runApp('Documents/INFO201/a7--NahomAgidew')
response <- GET(uri, add_headers("X-API-Key" = propublica_key))
response <- GET("https://api.propublica.org/congress/v1/115/house/members.json", add_headers("X-API-Key" = propublica_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
flatten(response_data$results)
View(flatten(response_data$results))
View(flatten(response_data$results$members))
View(flatten(response_data$results)$members)
View(flatten(response_data$results)$members[[1]])
setwd("~/Documents/INFO201/AE-Spicy-Salmon")
shiny::runApp()
runApp()
