samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("ggmap")
install.packages("ggplot2")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = FALSE)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
# Load packages
library("dplyr")
library("ggplot2")
library("ggmap")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
install.packages("plotly")
install.packages("rbokeh ")
install.packages("rbokeh")
install.packages("leaflet")
shiny::runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
install.packages("shinyjs")
runApp('INFO201/a7--rklein324')
runApp()
runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
runApp('INFO201/a7--rklein324')
setwd("~/INFO201/a7--rklein324")
library(httr)
library(jsonlite)
library(ggplot2)
library(eeptools)
library(dplyr)
source("api_keys.R")
endpoint <- "https://api.propublica.org/congress/v1/members"
get_state_info <- function(state){
uri <- paste0(endpoint, "/house/", state, "/current.json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
response_data_results <- response_data$results
}
get_member_info <- function(id){
uri <- paste0(endpoint, "/", id, ".json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
response_data_results <- response_data$results
}
get_member_age <- function(id){
df <- get_member_info(id)
dob <- as.Date(df$date_of_birth)
age <- age_calc(dob, units = "years", precise = FALSE)
}
get_member_url <- function(id){
df <- get_member_info(id)
if(is.na(df$url)){
return("n/a")
}
df$url
}
get_member_phone <- function(id){
df <- get_member_info(id)
phone <- as.data.frame(df$roles)[1, "phone"]
if(is.na(phone)){
return("n/a")
}
phone
}
get_member_address <- function(id){
df <- get_member_info(id)
address <- as.data.frame(df$roles)[1, "office"]
if(is.na(address)){
return("n/a")
}
address
}
get_state_df <- function(state){
df <- get_state_info(state)
df <- mutate(df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
main_df <- select(df, party_name, age, twitter, facebook)
df$name <- data.frame(df[df$name, district], df[df$name, url], df[df$name, phone], df[df$name, address])
both <- cbind(main_df, df$name)
}
get_state_gender <- function(state){
df <- get_state_info(state)
df <- group_by(df, gender) %>%
summarize(number = n())
}
get_state_party <- function(state){
df <- get_state_info(state)
df <- group_by(df, party) %>%
summarize(number = n())
}
create_state_list <- function() {
df <- read.csv("./data/states.csv",
header = TRUE,
stringsAsFactors = FALSE
)
state_list <- df$Code
names(state_list) <- df$State
state_list
}
state <- get_state_df("WA")
get_state_df <- function(state){
df <- get_state_info(state)
df <- mutate(df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
main_df <- select(df, party_name, age, twitter, facebook)
df$name <- data.frame(df[df$name, "district"], df[df$name, "url"], df[df$name, "phone"], df[df$name, "address"])
both <- cbind(main_df, df$name)
}
state <- get_state_df("WA")
View(state)
library(httr)
library(jsonlite)
library(ggplot2)
library(eeptools)
library(dplyr)
source("api_keys.R")
endpoint <- "https://api.propublica.org/congress/v1/members"
get_state_info <- function(state){
uri <- paste0(endpoint, "/house/", state, "/current.json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
state_df <- response_data$results
state_df <- mutate(df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
}
get_member_info <- function(id){
uri <- paste0(endpoint, "/", id, ".json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
response_data_results <- response_data$results
}
get_member_age <- function(id){
df <- get_member_info(id)
dob <- as.Date(df$date_of_birth)
age <- age_calc(dob, units = "years", precise = FALSE)
}
get_member_url <- function(id){
df <- get_member_info(id)
if(is.na(df$url)){
return("n/a")
}
df$url
}
get_member_phone <- function(id){
df <- get_member_info(id)
phone <- as.data.frame(df$roles)[1, "phone"]
if(is.na(phone)){
return("n/a")
}
phone
}
get_member_address <- function(id){
df <- get_member_info(id)
address <- as.data.frame(df$roles)[1, "office"]
if(is.na(address)){
return("n/a")
}
address
}
get_state_df <- function(state){
df <- get_state_info(state) %>%
select(df, name, party_name, age, twitter, facebook)
}
get_member_extra_info <- function(state, member){
df <- get_state_info(state) %>%
filter(name == member) %>%
select(df, district, url, phone, address)
}
get_state_gender <- function(state){
df <- get_state_info(state)
df <- group_by(df, gender) %>%
summarize(number = n())
}
get_state_party <- function(state){
df <- get_state_info(state)
df <- group_by(df, party) %>%
summarize(number = n())
}
create_state_list <- function() {
df <- read.csv("./data/states.csv",
header = TRUE,
stringsAsFactors = FALSE
)
state_list <- df$Code
names(state_list) <- df$State
state_list
}
state <- get_state_df("WA")
get_state_info <- function(state){
uri <- paste0(endpoint, "/house/", state, "/current.json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
state_df <- response_data$results
state_df <- mutate(state_df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
}
state <- get_state_df("WA")
get_state_info <- function(state){
uri <- paste0(endpoint, "/house/", state, "/current.json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
df <- response_data$results
df <- mutate(df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
}
state <- get_state_df("WA")
get_state_df <- function(state){
df <- get_state_info(state)
df <- select(df, name, party_name, age, twitter, facebook)
}
get_member_extra_info <- function(state, member){
df <- get_state_info(state)
df <- filter(name == member) %>%
select(df, district, url, phone, address)
}
state <- get_state_df("WA")
View(state)
get_member_extra_info("WA", "Suzan K. DelBene")
get_member_extra_info <- function(state, member){
df <- get_state_info(state)
df <- filter(name == member) %>%
select(district, url, phone, address)
}
get_member_extra_info("WA", "Suzan K. DelBene")
library(tidyr)
get_member_extra_info("WA", "Suzan K. DelBene")
get_member_extra_list <- function(state, member){
df <- get_state_info(state)
info <- list(
district = df[name, district],
url = df[name, url],
phone = df[name, phone],
address = df[name, address]
)
}
get_member_info_list <- function(state, member){
df <- get_state_info(state)
info <- list(
district = df[name, district],
url = df[name, url],
phone = df[name, phone],
address = df[name, address]
)
}
get_member_info_list("WA", "Suzan K. DelBene")
full_state <- get_state_info("WA")
View(full_state)
get_member_info_list <- function(state, row){
df <- get_state_info(state)
info <- list(
district = df[row, "district"],
url = df[row, "url"],
phone = df[row, "phone"],
address = df[row, "address"]
)
}
get_member_info_list("WA", 1)
member <- get_member_info_list("WA", 1)
View(member)
install.packages("DT")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/INFO201/AE-Spicy-Salmon")
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='rklein',
token='9D6BCF18AFA26BED96103C430DD0423B',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='rklein',
token='9D6BCF18AFA26BED96103C430DD0423B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='rklein', token='9D6BCF18AFA26BED96103C430DD0423B', secret='+ZGOvXTHXN7I+BAUc+JwKyaGqlPGIpgioVDIW0QJ')
setwd("~/INFO201/AE-Spicy-Salmon")
rsconnect::deployApp('app.R')
rsconnect::deployApp()
shiny::runApp('~/INFO201/a7--rklein324')
get_member_info_list("WA", 1)
member <- get_member_info_list("WA", 1)
View(member)
runApp('~/INFO201/a7--rklein324')
typeof(input$state_table_rows_selected)
runApp('~/INFO201/a7--rklein324')
#-----------------------------------
# Creates query page
#-----------------------------------
query_page <- tabPanel(
"Find Representitive",
titlePanel("Find My Representitive"),
sidebarLayout(
# creates sidebar panel for choosing a state
sidebarPanel(
# creates drop down list of states
selectInput(
inputId = "state_for_list",
label = h3("Choose a State"),
choices = create_state_list(),
selected = "AL"
)
),
# creates main panel with a table
mainPanel(
# shows table of representatives for a state
DTOutput("state_table"),
textOutput("row"),
# creates UI for showing and hiding advanced info about representative
# a(id = "toggle_advanced", "Show/hide advanced info", href = "#"),
# shinyjs::hidden(div(id = "advanced", verbatimTextOutput("selected_member")))
# verbatimTextOutput("selected_member")
conditionalPanel(
condition <- "typeof input.dt_rows_selected  !== 'undefined' && input.dt_rows_selected.length > 0" ,
renderPrint(input$state_table_rows_selected)
)
)
)
)
runApp('~/INFO201/a7--rklein324')
runApp('~/INFO201/a7--rklein324')
print(get_member_extra_info("WA", 1))
runApp('~/INFO201/a7--rklein324')
runApp('~/INFO201/a7--rklein324')
runApp('~/INFO201/a7--rklein324')
print(get_member_extra_info("WA", 1))
runApp('~/INFO201/a7--rklein324')
runApp('~/INFO201/a7--rklein324')
get_member_extra_info <- function(state, row){
df <- get_state_info(state)
district = df[row, "district"]
url = df[row, "url"]
phone = df[row, "phone"]
address = df[row, "address"]
tags$div("district: ", district, tags$br(), "website: ", url, tags$br(), "phone number: ", phone, tags$br(), "address: ", address)
}
print(get_member_extra_info("WA", 1))
runApp('~/INFO201/a7--rklein324')
