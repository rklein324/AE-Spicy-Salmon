radioButtons("sex",
label = h3("Would you like to separate the data by sex?"),
choices = list("No" = 1, "Yes" = 2),
selected = 1),
# can select a river (or rivers) to look at data about
# none selected means you look at the whole data set
radioButtons("river",
label = h3("Select river"),
choices = list("All" = "All",
"Chilkat" = "Chilkat",
"Stikine" = "Stikine",
"Taku" = "Taku",
"Unuk" = "Unuk"),
selected = "All")
),
# creates main panel with description and chart
mainPanel(
p("salmon have been changing in size (length in millimeters) over time;",
"this is shown in the data collected by",
"the Alaska Department of Fish and Game"),
p("this chart shows that change"),
p("you can decide to separate the data into males and females or not,",
"but separating it will result in less acurate data,",
"as not all observations recorded the sex"),
p("to see more specific information, you can select",
"a specific river in alaska to view;",
"you can also specify that range of time you would like to view"),
plotOutput(outputId = "size_chart")
)
)
)
library(shiny)
library(plotly)
library(ggplot2)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
server <- function(input, output) {
output$size_chart <- renderPlot({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
if(input$sex == 2) {
ggplot(data = df, aes(x = sampleYear, y = Length, color = Sex)) +
geom_line() +
geom_point()
} else {
ggplot(data = df, aes(x = sampleYear, y = Length)) +
geom_line() +
geom_point()
}
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_df(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
color = ~SpeciesCommon,
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
}
library(shiny)
source('pages/home.R')
source('pages/size_vs_time.R')
source('pages/harvesting.R')
source('pages/age_vs_size.R')
source('pages/conclusion.R')
#-----------------------------------
# Creates layout and puts together pages
#-----------------------------------
ui <- navbarPage(
"Spicy Salmon",
home_page,
size_vs_time_page,
age_vs_size_page,
harvesting_page,
conclusion_page
)
runApp('INFO201/AE-Spicy-Salmon')
library(ggplot2)
library(plotly)
runApp('INFO201/AE-Spicy-Salmon')
#-----------------------------------
# Creates summary page
#-----------------------------------
conclusion_page <- tabPanel(
"Conclusion",
titlePanel("Conclusion"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
h3("Data"),
p("https://knb.ecoinformatics.org/view/doi:10.5063/F11R6NSS"),
p("https://www.adfg.alaska.gov/index.cfm?adfg=commercialbyfisherysalmon.salmon_combined_historical")
),
# creates main panel
mainPanel(
p("One of the main strengths of our project is that our data clearly
shows a change over time. This concretely shows that salmon size is
reducing, and thus we can further correlate age and harvesting to the
size. Another strength of our project is the visualizations that help
the viewers better understand and comprehend the change (we will be
refining this before the final deliverable)."),
p("One of the main lessons we learned is the importance of a correct
data set that showed a change over time. If a data set did not have a
large range of time, it became less reliable in terms of showing concrete
changes. We also learned the strengths and weaknesses of the different
visualization methods. In the future, we would like to pursue research on
the reduction of salmon food in the water bodies where salmon are most
commonly found."),
p("Note: In the final deliverable, this page will contain more analysis
but since we are still in the process of analyzing our data – this
describes the project strengths, lessons, and future plans.")
)
)
)
library(shiny)
#-----------------------------------
# Creates summary page
#-----------------------------------
conclusion_page <- tabPanel(
"Conclusion",
titlePanel("Conclusion"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
h3("Data"),
p("https://knb.ecoinformatics.org/view/doi:10.5063/F11R6NSS"),
p("https://www.adfg.alaska.gov/index.cfm?adfg=commercialbyfisherysalmon.salmon_combined_historical")
),
# creates main panel
mainPanel(
p("One of the main strengths of our project is that our data clearly
shows a change over time. This concretely shows that salmon size is
reducing, and thus we can further correlate age and harvesting to the
size. Another strength of our project is the visualizations that help
the viewers better understand and comprehend the change (we will be
refining this before the final deliverable)."),
p("One of the main lessons we learned is the importance of a correct
data set that showed a change over time. If a data set did not have a
large range of time, it became less reliable in terms of showing concrete
changes. We also learned the strengths and weaknesses of the different
visualization methods. In the future, we would like to pursue research on
the reduction of salmon food in the water bodies where salmon are most
commonly found."),
p("Note: In the final deliverable, this page will contain more analysis
but since we are still in the process of analyzing our data – this
describes the project strengths, lessons, and future plans.")
)
)
)
runApp('INFO201/AE-Spicy-Salmon')
#-----------------------------------
# Creates summary page
#-----------------------------------
conclusion_page <- tabPanel(
"Conclusion",
titlePanel("Conclusion"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
h3("Data"),
tags$a(href="https://knb.ecoinformatics.org/view/doi:10.5063/F11R6NSS", "Size and Age Data"),
tags$a(href="https://www.adfg.alaska.gov/index.cfm?adfg=commercialbyfisherysalmon.salmon_combined_historical", "Harvest Data")
),
# creates main panel
mainPanel(
p("One of the main strengths of our project is that our data clearly
shows a change over time. This concretely shows that salmon size is
reducing, and thus we can further correlate age and harvesting to the
size. Another strength of our project is the visualizations that help
the viewers better understand and comprehend the change (we will be
refining this before the final deliverable)."),
p("One of the main lessons we learned is the importance of a correct
data set that showed a change over time. If a data set did not have a
large range of time, it became less reliable in terms of showing concrete
changes. We also learned the strengths and weaknesses of the different
visualization methods. In the future, we would like to pursue research on
the reduction of salmon food in the water bodies where salmon are most
commonly found."),
p("Note: In the final deliverable, this page will contain more analysis
but since we are still in the process of analyzing our data – this
describes the project strengths, lessons, and future plans.")
)
)
)
runApp('INFO201/AE-Spicy-Salmon')
#-----------------------------------
# Creates query page
#-----------------------------------
home_page <- tabPanel(
"Home",
titlePanel("Home"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
h4("Research Team"),
p("Aarushi, Rebecca, Nitidh, and Nahom")
),
# creates main panel
mainPanel(
p("Welcome to the world of Spicy Salmon! In this app, you will find",
"research that deatils the reduction in size of salmon and the",
"possible reasons that could be correlated to this change.",
"This project was created as part of our INFO 201 class at UW - ",
"a special thanks to out TA (Benji) for all his help and support",
"thoughout the quarter.")
)
)
)
runApp('INFO201/AE-Spicy-Salmon')
library(dplyr)
get_harvest_df <- function() {
df <- read.csv("data/salmon_harvest.csv",
header = TRUE,
stringsAsFactors = FALSE)
return(df)
}
df <- get_harvest_df()
get_harvest_data <- function(start_year = 1975, end_year = 2018, species = c(
"Chinook", "Coho", "Chum", "Pink", "Sockeye"
)) {
return(df %>%
filter(Year >= start_year & Year <= end_year) %>%
filter(SpeciesCommon %in% species))
}
library(shiny)
library(plotly)
library(ggplot2)
library(tidyr)
source("analysis/size_analysis.R")
source("analysis/harvest_analysis.R")
source("analysis/size_age_analysis.R")
server <- function(input, output) {
output$size_chart <- renderPlot({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
if(input$sex == 2) {
ggplot(data = df, aes(x = sampleYear, y = Length, color = Sex)) +
geom_line() +
geom_point()
} else {
ggplot(data = df, aes(x = sampleYear, y = Length)) +
geom_line() +
geom_point()
}
})
output$harvest_plot <- renderPlotly({
df <- get_harvest_data(start_year = input$harvest_year[1],
end_year = input$harvest_year[2],
species = input$harvest_species)
df %>%
plot_ly(x = ~Year,
y = ~get(input$harvest_y_axis),
color = ~SpeciesCommon,
type = 'scatter',
mode = 'lines+markers') %>%
layout(yaxis = list(
title = input$harvest_y_axis
))
})
output$age_vs_size <- renderPlot({
df <- create_size_age_df()
df <- mutate_size_age_df(df)
df <- df %>% select(Length, age, Sex, river)
df <- drop_na(df)
# df <- df %>% filter(Sex == "female", age == 2)
if(input$selectSex == 1) {
df <- df %>% filter(Sex == "female")
} else if(input$selectSex == 0) {
df <- df %>% filter(Sex == "male")
}
if (input$river == "Stikine") {
df <- df %>% filter(river == "Stikine")
} else if(input$river == "Chilkat") {
df <- df %>% filter(river == "Chilkat")
} else if(input$river == "Taku") {
df <- df %>% filter(river == "Taku")
} else if(input$river == "Unuk") {
df <- df %>% filter(river == "Unuk")
}
df2 <- df %>% group_by(age) %>%
summarise(aveSize = mean(Length))
ggplot(df2, aes(x=age, y=aveSize)) +
geom_line() +
geom_point()
})
}
age_vs_size_page <- tabPanel(
"Age Vs Size",
titlePanel("Comparing the Age and Size of Salmon"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
radioButtons("selectSex",
label = "Select Male or Female",
choices = list("Male" = 0, "Female" = 1, "All" = 2),
selected = 2
),
radioButtons("river",
label = h3("Select river"),
choices = list("All" = "All",
"Chilkat" = "Chilkat",
"Stikine" = "Stikine",
"Taku" = "Taku",
"Unuk" = "Unuk"),
selected = "All"
))
,
# creates main panel
mainPanel(
p("This page shows the age versus  size of the salmon.",
"In the sidebar window, the user can filter the sex of the salmon",
"and at the same time select the river."),
p("The chart shows the change in salmon size as their age develop.",
"We can clearly see that there is something wrong with the female at",
"the age of 2. There's a anomaly because there's only one fish in the",
"data for that age whose length is 835mm. Apart from that, the graph",
"looks like what we expected."),
p("We obtained this information from Metadata: Chinook salmon",
"age, sex, and length data from major rivers in Southeast Alaska, 1988-2017."),
plotOutput(outputId = "age_vs_size")
)
)
)
library(plotly)
harvesting_page <- tabPanel(
"Harvesting",
titlePanel("Harvesting"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
selectInput("harvest_y_axis", "Y-axis variable",
choices = list("Number of Fish" = "NumberOfFish",
"Pounds" = "Pounds",
"Revenue" = "EstimatedExvesselValue"),
selected = "NumberOfFish"),
selectInput("harvest_species", "Species",
multiple = TRUE, selectize = TRUE,
choices = c("Chinook", "Chum", "Coho", "Pink", "Sockeye"),
selected = c("Chinook", "Chum", "Coho", "Pink", "Sockeye")),
sliderInput("harvest_year", "Harvest Year", min = 1975, max = 2018,
value = c(1975, 2018), sep = "")
),
# creates main panel
mainPanel(
p("On this page, you can manipulate the variables to see:"),
tags$ul(
tags$li("How much salmon was harvested (in pounds)"),
tags$li("The number of salmon fish harvested"),
tags$li("The estimated revenue from sales in USD")
),
plotlyOutput("harvest_plot"),
p("The data in the chart above is sourced from
Alaska Department of Fish and Game (ADF&G)
fish tickets and Commercial Fisheries Entry Commission (CFEC)
estimates of gross earnings."),
p("These data contain all species of salmon combined
(Chinook, sockeye, coho, chum, and pink salmon).")
)
)
)
runApp('INFO201/AE-Spicy-Salmon')
library(httr)
library(jsonlite)
library(ggplot2)
library(eeptools)
library(dplyr)
library(tidyr)
source("api_keys.R")
endpoint <- "https://api.propublica.org/congress/v1/members"
get_state_info <- function(chamber = "house", state = "WA"){
uri <- paste0(endpoint, "/", chamber, "/", state, "/current.json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text", encoding = "UTF-8")
response_data <- fromJSON(response_text)
df <- response_data$results
df <- mutate(df, age = sapply(df$id, get_member_age),
party_name = ifelse(party == "D", "Democrate", "Republican"),
twitter = ifelse(is.na(twitter_id), "n/a", twitter_id),
facebook = ifelse(is.na(facebook_account), "n/a", facebook_account),
url = sapply(df$id, get_member_url),
phone = sapply(df$id, get_member_phone),
address = sapply(df$id, get_member_address))
}
get_member_info <- function(id){
uri <- paste0(endpoint, "/", id, ".json")
response <- GET(uri, add_headers("X-API-Key" = api_key))
response_text <- content(response, type = "text", encoding = "UTF-8")
response_data <- fromJSON(response_text)
response_data_results <- response_data$results
}
get_member_age <- function(id){
df <- get_member_info(id)
dob <- as.Date(df$date_of_birth)
age <- age_calc(dob, units = "years", precise = FALSE)
}
get_member_url <- function(id){
df <- get_member_info(id)
if(is.na(df$url)){
return("n/a")
}
df$url
}
get_member_phone <- function(id){
df <- get_member_info(id)
phone <- as.data.frame(df$roles)[1, "phone"]
if(is.na(phone)){
return("n/a")
}
phone
}
get_member_address <- function(id){
df <- get_member_info(id)
address <- as.data.frame(df$roles)[1, "office"]
if(is.na(address)){
return("n/a")
}
address
}
get_state_df <- function(state){
df <- get_state_info(state = state)
df <- select(df, name, party_name, age, twitter, facebook)
}
get_member_extra_info <- function(state, row){
df <- get_state_info(state = state)
district = df[row, "district"]
url = df[row, "url"]
phone = df[row, "phone"]
address = df[row, "address"]
tags$div("district: ", district, tags$br(), "website: ", url, tags$br(), "phone number: ", phone, tags$br(), "address: ", address)
}
get_state_gender <- function(state){
df <- get_state_info(state = state)
df <- group_by(df, gender) %>%
summarize(number = n())
}
get_state_party <- function(state){
df <- get_state_info(state = state)
df <- group_by(df, party) %>%
summarize(number = n())
}
create_state_list <- function() {
df <- read.csv("./data/states.csv",
header = TRUE,
stringsAsFactors = FALSE
)
state_list <- df$Code
names(state_list) <- df$State
state_list
}
View(get_state_info(state = "WA"))
# API key for https://projects.propublica.org/api-docs/congress-api/
api_key <- "YrGjgTnPdSIcbIsHATGqU3WNWUwprD8bkUcJ4p5E"
View(get_state_info(state = "WA"))
View(get_member_info(D000617))
View(get_member_info("D000617"))
View((get_member_info("D000617"))[[25]][[1]])
about_page <- tabPanel(
"About",
titlePanel("About Us"),
verticalLayout(
p(h3("Aarushi Bhatnagar")),
p(h3("Nahom Abi"), "Nahom is a junior at the University of Washington
pursuing a degree in Informatics. He plans to start a company after
graduation."),
p(h3("Nitidh Lamsam")),
p(h3("Rebecca Klein"), "Rebecca is a junior at the University of
Washington and an Informatics major. She transfered to UW this year
from North Seattle College. Rebecca aspires to be a data scientist
in a research organization.")
)
)
shiny::runApp('INFO201/AE-Spicy-Salmon')
setwd("~/INFO201/AE-Spicy-Salmon")
lintr::lint("app.R")
lintr::lint("app.R")
lintr::lint("app_ui.R")
lintr::lint("app_ui.R")
lintr::lint("app_server.R")
lintr::lint("app_server.R")
lintr::lint("app_server.R")
lintr::lint("analysis/harvest_analysis.R")
lintr::lint("analysis/harvest_analysis.R")
lintr::lint("analysis/size_age_analysis.R")
lintr::lint("analysis/size_age_analysis.R")
lintr::lint("analysis/size_analysis.R")
lintr::lint("analysis/size_analysis.R")
lintr::lint("analysis/size_analysis.R")
lintr::lint("pages/about.R")
lintr::lint("pages/about.R")
lintr::lint("pages/age_vs_size.R")
lintr::lint("pages/age_vs_size.R")
lintr::lint("pages/age_vs_size.R")
lintr::lint("pages/conclusion.R")
lintr::lint("pages/conclusion.R")
lintr::lint("pages/conclusion.R")
lintr::lint("pages/harvesting")
lintr::lint("pages/harvesting.R")
lintr::lint("pages/harvesting.R")
lintr::lint("pages/home.R")
lintr::lint("pages/home.R")
lintr::lint("pages/size_vs_time.R")
lintr::lint("pages/size_vs_time.R")
lintr::lint("app_server")
lintr::lint("app_server.R")
runApp()
runApp()
lintr::lint("app_server.R")
runApp()
