river = sapply(strsplit(df$Location,' '), '[',1),
# age calculation is from discription of data set
age = suppressWarnings(as.numeric(Fresh.Water.Age) + as.numeric(Salt.Water.Age) + 1)
)
}
create_edited_size_df()
library(dplyr)
source('size_age_analysis.R')
# creates the data frame for the size chart
create_size_age_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
# groups by sex so both lines will show in graph
if(sep == 2) {
df <- group_by(df, Sex)
}
}
runApp()
create_edited_size_df <- function() {
df <- create_size_df() %>%
mutate_size_df() %>%
select(date, sampleYear, river, Sex, Length, age)
}
runApp()
is.data.frame(create_edited_size_df())
is.data.frame(create_size_age_df(create_edited_size_df(), sep = 1, place = "All"))
create_size_age_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
# groups by sex so both lines will show in graph
if(sep == 2) {
df <- group_by(df, Sex)
}
return(as.data.frame(df))
}
is.data.frame(create_size_age_df(create_edited_size_df(), sep = 1, place = "All"))
runApp()
library(dplyr)
source('size_age_analysis.R')
# creates the data frame for the size chart
create_size_age_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
}
runApp()
df <- create_size_df()
View(df)
df <- create_edited_size_df()
View(df)
library(dplyr)
library(stringr)
# creates data frame from salmon age and size csv
create_size_age_df <- function() {
df <- read.csv("data/salmon_age_size.csv",
header = TRUE,
stringsAsFactors = FALSE
)
return(df)
}
# mutates the data frame to add a date column, a simplified river column,
# and an age column calculated using the formula given in the data set document
mutate_size_age_df <- function(df) {
new_df <- mutate(df, date = as.Date(sapply(strsplit(df$sampleDate,' '),
'[',1),'%m/%d/%Y'),
river = sapply(strsplit(df$Location,' '), '[',1),
# age calculation is from discription of data set
age = suppressWarnings(as.numeric(Fresh.Water.Age) +
as.numeric(Salt.Water.Age) + 1)
)
}
# creates the data frame that will be used for further analysis
create_edited_size_age_df <- function() {
df <- create_size_age_df() %>%
mutate_size_age_df() %>%
select(date, sampleYear, river, Sex, Length, age)
}
# -----------------------------------------------
# SOLEY INFORMATIVE INFORMATION FOR OUR OWN ANALYSIS
# -----------------------------------------------
# returns a data frame of how many values for each (important) column
# are missing per year
summarize_missing_data <- function(df) {
df <- mutate_size_df(df)
date <- df[is.na(df$sampleDate),] %>%
group_by(sampleYear) %>%
summarize(num_missing_date = n())
length <- df[is.na(df$Length),] %>%
group_by(sampleYear) %>%
summarize(num_missing_length = n())
age <- df[is.na(df$age),] %>%
group_by(sampleYear) %>%
summarize(num_missing_age = n())
sex <- df[is.na(df$Sex),] %>%
group_by(sampleYear) %>%
summarize(num_missing_sex = n())
years <- data.frame(sampleYear = 1988:2018) %>%
left_join(date, by = "sampleYear") %>%
left_join(length, by = "sampleYear") %>%
left_join(age, by = "sampleYear") %>%
left_join(sex, by = "sampleYear")
}
# returns a data frame with how many samples were taken for each year
number_obs_per_year <- function(df) {
group_by(df, sampleYear) %>%
summarize(num = n())
}
runApp()
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
plot_ly(df, x = ~sampleYear, y = ~Length, type = 'scatter', mode = 'lines')
})
}
runApp()
create_size_age_df <- function() {
df <- read.csv("data/salmon_age_size.csv",
header = TRUE,
stringsAsFactors = FALSE
)
return(df)
}
# mutates the data frame to add a date column, a simplified river column,
# and an age column calculated using the formula given in the data set document
mutate_size_age_df <- function(df) {
new_df <- mutate(df, date = as.Date(sapply(strsplit(df$sampleDate,' '),
'[',1),'%m/%d/%Y'),
river = sapply(strsplit(df$Location,' '), '[',1),
# age calculation is from discription of data set
age = suppressWarnings(as.numeric(Fresh.Water.Age) +
as.numeric(Salt.Water.Age) + 1)
)
}
# creates the data frame that will be used for further analysis
create_edited_size_age_df <- function() {
df <- create_size_age_df() %>%
mutate_size_age_df() %>%
select(date, sampleYear, river, Sex, Length, age)
}
runApp()
create_size_df(df)
runApp()
library(dplyr)
library(stringr)
# creates data frame from salmon age and size csv
create_size_age_df <- function() {
df <- read.csv("data/salmon_age_size.csv",
header = TRUE,
stringsAsFactors = FALSE
)
return(df)
}
# mutates the data frame to add a date column, a simplified river column,
# and an age column calculated using the formula given in the data set document
mutate_size_age_df <- function(df) {
new_df <- mutate(df, date = as.Date(sapply(strsplit(df$sampleDate,' '),
'[',1),'%m/%d/%Y'),
river = sapply(strsplit(df$Location,' '), '[',1),
# age calculation is from discription of data set
age = suppressWarnings(as.numeric(Fresh.Water.Age) +
as.numeric(Salt.Water.Age) + 1)
)
}
# creates the data frame that will be used for further analysis
create_edited_size_age_df <- function() {
df <- create_size_age_df() %>%
mutate_size_age_df() %>%
select(date, sampleYear, river, Sex, Length, age)
}
# -----------------------------------------------
# SOLEY INFORMATIVE INFORMATION FOR OUR OWN ANALYSIS
# -----------------------------------------------
# returns a data frame of how many values for each (important) column
# are missing per year
summarize_missing_data <- function(df) {
df <- mutate_size_df(df)
date <- df[is.na(df$sampleDate),] %>%
group_by(sampleYear) %>%
summarize(num_missing_date = n())
length <- df[is.na(df$Length),] %>%
group_by(sampleYear) %>%
summarize(num_missing_length = n())
age <- df[is.na(df$age),] %>%
group_by(sampleYear) %>%
summarize(num_missing_age = n())
sex <- df[is.na(df$Sex),] %>%
group_by(sampleYear) %>%
summarize(num_missing_sex = n())
years <- data.frame(sampleYear = 1988:2018) %>%
left_join(date, by = "sampleYear") %>%
left_join(length, by = "sampleYear") %>%
left_join(age, by = "sampleYear") %>%
left_join(sex, by = "sampleYear")
}
# returns a data frame with how many samples were taken for each year
number_obs_per_year <- function(df) {
group_by(df, sampleYear) %>%
summarize(num = n())
}
library(dplyr)
source('size_age_analysis.R')
# creates the data frame for the size chart
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
}
size_vs_time_page <- tabPanel(
"Size Over Time",
titlePanel("The Change in Salmon Size Over Time"),
sidebarLayout(
# creates sidebar panel
sidebarPanel(
# can select whether to separate by sex or not
radioButtons("sex",
label = h3("Would you like to separate the data by sex?"),
choices = list("No" = 1, "Yes" = 2),
selected = 1),
# can select a river (or rivers) to look at data about
# none selected means you look at the whole data set
radioButtons("river",
label = h3("Select river"),
choices = list("All" = "All",
"Chilkat" = "Chilkat",
"Stikine" = "Stikine",
"Taku" = "Taku",
"Unuk" = "Unuk"),
selected = "All"),
# can change the range of years to look at the data
sliderInput("year_range",
label = h3("Years"),
min = 1988,
max = 2018,
value = c(1988, 2018),
sep = "") # means that there won't be a comma in the year
),
# creates main panel with description and chart
mainPanel(
p("salmon have been changing in size (length in millimeters) over time;",
"this is shown in the data collected by",
"the Alaska Department of Fish and Game"),
p("this chart shows that change"),
p("you can decide to separate the data into males and females or not,",
"but separating it will result in less acurate data,",
"as not all observations recorded the sex"),
p("to see more specific information, you can select",
"a specific river in alaska to view;",
"you can also specify that range of time you would like to view"),
plotlyOutput(outputId = "size_chart")
)
)
)
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
plot_ly(df, x = ~sampleYear, y = ~Length, type = 'scatter', mode = 'lines')
})
}
runApp()
create_size_df(create_edited_size_age_df(), place = "Unuk")
View(create_size_df(create_edited_size_age_df(), place = "Unuk"))
library(ggplot2)
runApp()
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
ggplot(data = df, aes(x = sampleYear, y = Length)) +
geom_line() +
geom_point()
})
}
runApp()
library(dplyr)
source('size_age_analysis.R')
# creates the data frame for the size chart
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
}
}
runApp()
library(dplyr)
source('size_age_analysis.R')
# creates the data frame for the size chart
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
#if(sep == 2) {
#  df <- group_by(df, sampleYear, Sex)
#}
}
is.data.frame(create_size_df(df))
df <- create_edited_size_age_df()
is.data.frame(create_size_df(df))
View(create_size_df(df))
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
}
}
View(create_size_df(df))
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
#if(sep == 2) {
#  df <- group_by(df, sampleYear, Sex)
#}
}
View(create_size_df(df))
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
}
}
View(create_size_df(df))
return(df)
View(create_size_df(df))
create_size_df <- function(df, sep = 1, place = "All") {
# filters for the river selected if applicable
if(place != "All") {
df <- filter(df, df$river == place)
}
# these if statements define what columns will be in the final summarized df
if(sep == 2 && place != "All") {
df <- group_by(df, sampleYear, river, Sex)
} else if(place != "All") {
df <- group_by(df, sampleYear, river)
} else if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
} else {
df <- group_by(df, sampleYear)
}
# does the summarizing, gets rid of rows with NAs
df <- summarize(df, Length = mean(Length, na.rm = TRUE)) %>%
drop_na()
if(sep == 2) {
df <- group_by(df, sampleYear, Sex)
}
return(df)
}
View(create_size_df(df))
View(create_size_df(df, sep = 2))
runApp()
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
ggplot(data = df, aes(x = sampleYear, y = Length, color = Sex)) +
geom_line() +
geom_point()
})
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
ggplot(data = df, aes(x = sampleYear, y = Length, color = Sex)) +
geom_line() +
geom_point()
})
}
runApp()
server <- function(input, output) {
output$size_chart <- renderPlotly({
df <- create_size_df(create_edited_size_age_df(), sep = input$sex, place = input$river)
if(input$sex == 2) {
ggplot(data = df, aes(x = sampleYear, y = Length, color = Sex)) +
geom_line() +
geom_point()
} else {
ggplot(data = df, aes(x = sampleYear, y = Length)) +
geom_line() +
geom_point()
}
})
}
runApp()
